{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\src\\App.svelte",
    "..\\..\\src\\Char.svelte",
    "..\\..\\src\\Sky.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onDestroy, onMount } from \"svelte\";\r\n  import Char from \"./Char.svelte\";\r\n  import Map from \"./Map.svelte\";\r\n  import Sky from \"./Sky.svelte\";\r\n\r\n  const interval = 3000;\r\n  const maxLevel = 10;\r\n  const height = 600;\r\n  const obstacleHeight = 35;\r\n  const tileSize = 46;\r\n  const width = 800;\r\n\r\n  let canvasRef;\r\n  let char;\r\n  let level = 1;\r\n  let levelTimer;\r\n  let lost = false;\r\n  let map;\r\n  let musicEnabled = true;\r\n  let musicRef;\r\n  let nextDrawTime = Date.now();\r\n  let paused = true;\r\n  let sky;\r\n  let won = false;\r\n\r\n  $: fps = 1000 / (level + 5);\r\n\r\n  onMount(async () => {\r\n    await map.init();\r\n    await sky.init();\r\n    map.draw();\r\n    animate();\r\n\r\n    levelTimer = setInterval(() => {\r\n      if (!paused) {\r\n        level++;\r\n        musicRef.playbackRate += 0.1;\r\n\r\n        if (level >= maxLevel) {\r\n          won = true;\r\n          if (musicEnabled) {\r\n            musicRef.src = \"/assets/music/won.mp3\";\r\n          }\r\n        }\r\n      }\r\n    }, interval);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    clearInterval(levelTimer);\r\n  });\r\n\r\n  function animate() {\r\n    if (!paused) {\r\n      // request another frame\r\n      requestAnimationFrame(animate);\r\n      // calc elapsed time since last loop\r\n      const now = Date.now();\r\n      const elapsed = now - nextDrawTime;\r\n\r\n      // if enough time has elapsed, draw the next frame\r\n      if (elapsed > fps) {\r\n        // Get ready for next frame by setting nextDrawTime=now, but also adjust for your\r\n        // specified fps not being a multiple of RAF's interval (16.7ms)\r\n        nextDrawTime = now - (elapsed % fps);\r\n        map.draw();\r\n      }\r\n    }\r\n  }\r\n\r\n  function onKeypress(e) {\r\n    if (!char.isJumping()) {\r\n      if (e.which === 13) {\r\n        if (lost || won) {\r\n          won = false;\r\n          lost = false;\r\n          level = 1;\r\n        }\r\n\r\n        paused = !paused;\r\n\r\n        if (paused) {\r\n          musicRef.pause();\r\n        } else {\r\n          musicRef.src = \"/assets/music/music.mp3\";\r\n        }\r\n        animate();\r\n      } else if (e.which === 32) {\r\n        char.jump();\r\n      }\r\n    }\r\n  }\r\n\r\n  function onMapSlide(e) {\r\n    const charPosition = char.getPosition();\r\n    const tile = e.detail[1];\r\n\r\n    if (tile.obstacle) {\r\n      const obstaclePosition = parseInt(\r\n        tile.obstacle.style.top.replace(\"px\", \"\")\r\n      );\r\n\r\n      if (charPosition.top > 400) {\r\n        lost = true;\r\n\r\n        if (musicEnabled) {\r\n          musicRef.src = \"/assets/music/lost.mp3\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function onToggleMusic(enable) {\r\n    musicEnabled = enable;\r\n    if (musicEnabled) {\r\n      !paused && musicRef.play();\r\n    } else {\r\n      musicRef.pause();\r\n    }\r\n  }\r\n\r\n  $: if (lost || won) {\r\n    paused = true;\r\n    musicRef.playbackRate = 1;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .canvas {\r\n    position: relative;\r\n  }\r\n\r\n  .finished {\r\n    display: block !important;\r\n  }\r\n\r\n  .hide {\r\n    display: none;\r\n  }\r\n\r\n  .level {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    padding: 10px 10px;\r\n    color: black;\r\n    font-size: 1.5em;\r\n    text-align: right;\r\n  }\r\n\r\n  .status {\r\n    font-size: 4em;\r\n    font-weight: bold;\r\n    top: 30%;\r\n    left: 50%;\r\n    position: absolute;\r\n    transform: translateX(-50%);\r\n    display: none;\r\n  }\r\n</style>\r\n\r\n<svelte:head>\r\n  <title>Mario runner</title>\r\n</svelte:head>\r\n\r\n<svelte:window on:keypress={onKeypress} />\r\n\r\n<div class=\"canvas\" style=\"height:{height}px;width:{width}px\">\r\n  <div class=\"level\">Level: {level}</div>\r\n  <Sky bind:this={sky} bind:canvas={canvasRef} {width} {height} />\r\n  <Map\r\n    bind:this={map}\r\n    bind:canvas={canvasRef}\r\n    {width}\r\n    {height}\r\n    {obstacleHeight}\r\n    {tileSize}\r\n    on:slide={onMapSlide} />\r\n  <div style=\"margin-left:{tileSize}px\">\r\n    <Char bind:this={char} {tileSize} {paused} />\r\n  </div>\r\n  <div class=\"status {lost || won ? 'finished' : ''}\">\r\n    Você {lost ? 'perdeu' : 'ganhou'}\r\n  </div>\r\n  <audio bind:this={musicRef} autoplay=\"false\" />\r\n</div>\r\n<div>\r\n  <span>\r\n    Música\r\n    <button class:hide={musicEnabled} on:click={() => onToggleMusic(true)}>\r\n      On\r\n    </button>\r\n    <button class:hide={!musicEnabled} on:click={() => onToggleMusic(false)}>\r\n      Off\r\n    </button>\r\n  </span>\r\n  <br />\r\n  <strong>Controles</strong>\r\n  <br />\r\n  <span>Pressione enter para começar</span>\r\n  <br />\r\n  <span>Pular: espaço</span>\r\n  <br />\r\n  <span>Pausar/despausar: enter</span>\r\n</div>\r\n",
    "<script>\r\n  import cssVars from \"svelte-css-vars\";\r\n  import { onDestroy } from \"svelte\";\r\n\r\n  export let tileSize;\r\n  export let paused;\r\n\r\n  let charRef;\r\n  let jumping = false;\r\n  let jumpingTimer;\r\n  let walking = true;\r\n\r\n  let styleVars = {\r\n    jumpTime: \".3s\"\r\n  };\r\n\r\n  onDestroy(() => {\r\n    clearInterval(jumpingTimer);\r\n  });\r\n\r\n  export function walk() {\r\n    jumping = false;\r\n    walking = true;\r\n  }\r\n\r\n  export function jump() {\r\n    jumping = true;\r\n    walking = false;\r\n    clearTimeout(jumpingTimer);\r\n    jumpingTimer = setTimeout(walk, 500);\r\n  }\r\n\r\n  export function getPosition() {\r\n    return charRef.getBoundingClientRect();\r\n  }\r\n\r\n  export function isJumping() {\r\n    return jumping;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .char {\r\n    background-image: url(\"/assets/character/mario2.png\");\r\n    background-position: 0 0;\r\n    background-repeat: 0 0;\r\n    width: 48px;\r\n    height: 96px;\r\n    position: absolute;\r\n  }\r\n\r\n  .jumping {\r\n    transform-origin: 50% 50%;\r\n    animation: jump var(--jumpTime) linear alternate infinite;\r\n  }\r\n\r\n  .walking {\r\n    animation: char 0.5s steps(3) infinite;\r\n  }\r\n\r\n  .paused {\r\n    animation: none !important;\r\n  }\r\n\r\n  @keyframes char {\r\n    0% {\r\n      background-position: 0px 0;\r\n    }\r\n\r\n    100% {\r\n      background-position: 144px 0;\r\n    }\r\n  }\r\n\r\n  @keyframes jump {\r\n    0% {\r\n      transform: translate3d(0, 0px, 0) scale3d(1, 1, 1);\r\n    }\r\n    50% {\r\n      transform: translate3d(0, -60px, 0) scale3d(1, 1, 1);\r\n    }\r\n    100% {\r\n      transform: translate3d(0, -120px, 0) scale3d(1, 1, 1);\r\n    }\r\n  }\r\n</style>\r\n\r\n<div\r\n  bind:this={charRef}\r\n  class=\"char\"\r\n  style=\"bottom:{tileSize}px\"\r\n  use:cssVars={styleVars}\r\n  class:jumping\r\n  class:walking\r\n  class:paused />\r\n",
    "<script>\r\n  import images from \"./images.js\";\r\n\r\n  const cloud = {\r\n    single: { path: \"/assets/background/cloud-single.png\" },\r\n    multiple: { path: \"/assets/background/cloud-multiple.png\" }\r\n  };\r\n\r\n  export let canvas;\r\n  export let height;\r\n  export let width;\r\n\r\n  export async function init() {\r\n    await images.load(cloud);\r\n    let context = canvas.getContext(\"2d\");\r\n    const numberOfClouds = getRandom(5, 15);\r\n    let i = 0;\r\n\r\n    while (i < numberOfClouds) {\r\n      const randWidth = getRandom(0, width - cloud.single.image.width * 2);\r\n\r\n      if (randWidth < width) {\r\n        const randHeight = getRandom(0, height / 2);\r\n\r\n        if (randHeight % 2 === 0) {\r\n          context.drawImage(cloud.single.image, randWidth, randHeight);\r\n        } else {\r\n          context.drawImage(cloud.multiple.image, randWidth, randHeight);\r\n        }\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  function getRandom(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .sky {\r\n    position: absolute;\r\n  }\r\n</style>\r\n\r\n<div class=\"sky\" />\r\n"
  ],
  "names": [],
  "mappings": "AAiIE,OAAO,eAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,SAAS,eAAC,CAAC,AACT,OAAO,CAAE,KAAK,CAAC,UAAU,AAC3B,CAAC,AAED,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,AACf,CAAC,AAED,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,CAAC,CACR,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,KAAK,AACnB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,IAAI,CACjB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,OAAO,CAAE,IAAI,AACf,CAAC;ACrHD,KAAK,cAAC,CAAC,AACL,gBAAgB,CAAE,IAAI,8BAA8B,CAAC,CACrD,mBAAmB,CAAE,CAAC,CAAC,CAAC,CACxB,iBAAiB,CAAE,CAAC,CAAC,CAAC,CACtB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,gBAAgB,CAAE,GAAG,CAAC,GAAG,CACzB,SAAS,CAAE,kBAAI,CAAC,IAAI,UAAU,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,AAC3D,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,kBAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,AACxC,CAAC,AAED,OAAO,cAAC,CAAC,AACP,SAAS,CAAE,IAAI,CAAC,UAAU,AAC5B,CAAC,AAED,WAAW,kBAAK,CAAC,AACf,EAAE,AAAC,CAAC,AACF,mBAAmB,CAAE,GAAG,CAAC,CAAC,AAC5B,CAAC,AAED,IAAI,AAAC,CAAC,AACJ,mBAAmB,CAAE,KAAK,CAAC,CAAC,AAC9B,CAAC,AACH,CAAC,AAED,WAAW,kBAAK,CAAC,AACf,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AACpD,CAAC,AACD,GAAG,AAAC,CAAC,AACH,SAAS,CAAE,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AACtD,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AACvD,CAAC,AACH,CAAC;AC5CD,IAAI,eAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,AACpB,CAAC"
}